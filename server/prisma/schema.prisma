// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email            String  @unique
  name             String
  enrollment       String  @unique
  password         String
  verificationCode Int
  isVerified       Boolean @default(false)
  cellphone        String
  instagram        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  friends         User[] @relation("friends")
  friendsRelation User[] @relation("friends")

  Ride   Ride?   @relation(fields: [rideId], references: [id])
  rideId String?

  RefreshToken RefreshToken?
  Car          Car[]

  @@map("users")
}

model RefreshToken {
  id String @id @default(uuid())

  expiresIn Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique

  @@map("refresh_token")
}

model Route {
  id                     String   @id @default(uuid())
  originName             String
  destinationName        String
  distance               Int
  duration               Int
  destination            String[]
  origin                 String[]
  originNeighborhoodSlug String
  originNeighborhood     String
  createdAt              DateTime @default(now())
  createdBy              String
  Ride                   Ride[]

  @@map("routes")
}

model Car {
  id            String @id @default(uuid())
  brand         String
  model         String
  year          Int
  color         String
  license_plate String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  Ride          Ride[]

  @@map("cars")
}

model Ride {
  id              String   @id @default(uuid())
  route           Route    @relation(fields: [routeId], references: [id])
  routeId         String
  passengers      String[]
  driverId        String
  available_spots Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  car             Car      @relation(fields: [carId], references: [id])
  carId           String
  User            User[]

  @@map("rides")
}
